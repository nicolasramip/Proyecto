hist(colb$Población.Resto, main= "Población Resto", col= paleta)
# Chunk 4
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
colb$Cabecera.Transformada=log(colb$Población.Cabecera)
colb$Resto.Transformada=log(colb$Población.Resto)
vars<-colb[,c(7:8)]
stargazer(vars, title="Medidas estadisticas datos Transformados",label="stats1",summary.stat = c("n","min","median","max"))
View(colb)
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
corrDem
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
vars<-colb[,c(7:8)]
stargazer(vars, title="Medidas estadisticas datos Transformados",label="stats1",summary.stat = c("n","min","median","max"))
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
vars<-colb[,c(7:8)]
stargazer(vars, title="Medidas estadisticas datos Transformados",label="stats1",summary.stat = c("n","min","median","max"))
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
plot(colb[,explanans])
# Chunk 1: getData
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# Chunk 2: estadis
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
vars<-colb[,c(1:4)]
stargazer(vars, title="Medidas estadisticas",label="stats",summary.stat = c("n","min","median","max"))
# Chunk 3: histogramas
par(mfrow=c(1,3))
paleta="green"
hist(colb$IDH, main= "IDH", col= paleta)
paleta="Blue"
hist(colb$Población.Cabecera, main= "Población Cabecera",col= paleta)
paleta="red"
hist(colb$Población.Resto, main= "Población Resto", col= paleta)
# Chunk 4: transformacion
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
colb$Cabecera.Transformada=log(colb$Población.Cabecera)
colb$Resto.Transformada=log(colb$Población.Resto)
vars<-colb[,c(7:8)]
stargazer(vars, title="Medidas estadisticas datos Transformados",label="stats1",summary.stat = c("n","min","median","max"))
# Chunk 5: histogramas
par(mfrow=c(1,3))
paleta="green"
hist(colb$IDH, main= "IDH", col= paleta)
paleta="Blue"
hist(colb$Cabecera.Transformada, main= "Población Cabecera trans.",col= paleta)
paleta="red"
hist(colb$Resto.Transformada, main= "Población Resto trans.", col= paleta)
# Chunk 6: correlaciones
# En este trabajo estamos interesados en el impacto de
# la poblacion en el el IDH, veamos IDH con cada uno:
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="Correlaciones",label="cor")
# Chunk 7: correlacionesind
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX_copy, title="Correlaciones",label="correind")
# Chunk 8: pcorre
# y la correlación entre las variables independientes:
#ver:
plot(colb[,explanans])
# Chunk 9: Modelos regrescion
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
stargazer(LinRegA, title="Modelo de regresion sin población resto",label="regA")
stargazer(LinRegA, title="Modelo de regresion con población resto",label="regB")
# Chunk 10: getMap
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# Chunk 11
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# Chunk 12: plotMap1
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol,col='grey',border=0)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
# Chunk 1: getData
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# Chunk 2: estadis
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
vars<-colb[,c(1:4)]
stargazer(vars, title="Medidas estadisticas",label="stats",summary.stat = c("n","min","median","max"))
# Chunk 3: histogramas
par(mfrow=c(1,3))
paleta="green"
hist(colb$IDH, main= "IDH", col= paleta)
paleta="Blue"
hist(colb$Población.Cabecera, main= "Población Cabecera",col= paleta)
paleta="red"
hist(colb$Población.Resto, main= "Población Resto", col= paleta)
# Chunk 4: transformacion
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
colb$Cabecera.Transformada=log(colb$Población.Cabecera)
colb$Resto.Transformada=log(colb$Población.Resto)
vars<-colb[,c(7:8)]
stargazer(vars, title="Medidas estadisticas datos Transformados",label="stats1",summary.stat = c("n","min","median","max"))
# Chunk 5: histogramas
par(mfrow=c(1,3))
paleta="green"
hist(colb$IDH, main= "IDH", col= paleta)
paleta="Blue"
hist(colb$Cabecera.Transformada, main= "Población Cabecera trans.",col= paleta)
paleta="red"
hist(colb$Resto.Transformada, main= "Población Resto trans.", col= paleta)
# Chunk 6: correlaciones
# En este trabajo estamos interesados en el impacto de
# la poblacion en el el IDH, veamos IDH con cada uno:
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="Correlaciones",label="cor")
# Chunk 7: correlacionesind
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX_copy, title="Correlaciones",label="correind")
# Chunk 8: pcorre
# y la correlación entre las variables independientes:
#ver:
plot(colb[,explanans])
# Chunk 9: Modelos regrescion
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
stargazer(LinRegA, title="Modelo de regresion sin población resto",label="regA")
stargazer(LinRegA, title="Modelo de regresion con población resto",label="regB")
# Chunk 10: getMap
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# Chunk 11
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# Chunk 12: plotMap1
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol,col='grey',border=0)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
clusters=as.data.frame(resultado$cluster)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# Chunk 1: getData
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# Chunk 2: estadis
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
vars<-colb[,c(1:4)]
stargazer(vars, title="Medidas estadisticas",label="stats",summary.stat = c("n","min","median","max"))
# Chunk 3: histogramas
par(mfrow=c(1,3))
paleta="green"
hist(colb$IDH, main= "IDH", col= paleta)
paleta="Blue"
hist(colb$Población.Cabecera, main= "Población Cabecera",col= paleta)
paleta="red"
hist(colb$Población.Resto, main= "Población Resto", col= paleta)
# Chunk 4: transformacion
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
colb$Cabecera.Transformada=log(colb$Población.Cabecera)
colb$Resto.Transformada=log(colb$Población.Resto)
vars<-colb[,c(7:8)]
stargazer(vars, title="Medidas estadisticas datos Transformados",label="stats1",summary.stat = c("n","min","median","max"))
# Chunk 5: histogramas
par(mfrow=c(1,3))
paleta="green"
hist(colb$IDH, main= "IDH", col= paleta)
paleta="Blue"
hist(colb$Cabecera.Transformada, main= "Población Cabecera trans.",col= paleta)
paleta="red"
hist(colb$Resto.Transformada, main= "Población Resto trans.", col= paleta)
# Chunk 6: correlaciones
# En este trabajo estamos interesados en el impacto de
# la poblacion en el el IDH, veamos IDH con cada uno:
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="Correlaciones",label="cor")
# Chunk 7: correlacionesind
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX_copy, title="Correlaciones",label="correind")
# Chunk 8: pcorre
# y la correlación entre las variables independientes:
#ver:
plot(colb[,explanans])
# Chunk 9: Modelos regrescion
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
stargazer(LinRegA, title="Modelo de regresion sin población resto",label="regA")
stargazer(LinRegA, title="Modelo de regresion con población resto",label="regB")
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
dimensions=c("NAME_1","IDH","cabeLog","restoLog")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
dimensions=c("NAME_1","IDH","Cabecera.Transformada","Resto.Transformada")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol,col='grey',border=0)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol,col='grey',border=0)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
# Chunk 1: getData
# NO OLVIDAR set working directory
filename="colombia.csv"
colb=read.csv(filename, stringsAsFactors = FALSE)
# Chunk 2: estadis
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
vars<-colb[,c(1:4)]
stargazer(vars, title="Medidas estadisticas",label="stats",summary.stat = c("n","min","median","max"))
# Chunk 3: histogramas
par(mfrow=c(1,3))
paleta="green"
hist(colb$IDH, main= "IDH", col= paleta)
paleta="Blue"
hist(colb$Población.Cabecera, main= "Población Cabecera",col= paleta)
paleta="red"
hist(colb$Población.Resto, main= "Población Resto", col= paleta)
# Chunk 4: transformacion
# nos interesa IDH, y poblacion cabecera y poblacion resto
# no se puede secar tabla de frecuencia,
# solo estadisticos:
library(stargazer)
colb$Cabecera.Transformada=log(colb$Población.Cabecera)
colb$Resto.Transformada=log(colb$Población.Resto)
vars<-colb[,c(7:8)]
stargazer(vars, title="Medidas estadisticas datos Transformados",label="stats1",summary.stat = c("n","min","median","max"))
# Chunk 5: histogramas
par(mfrow=c(1,3))
paleta="green"
hist(colb$IDH, main= "IDH", col= paleta)
paleta="Blue"
hist(colb$Cabecera.Transformada, main= "Población Cabecera trans.",col= paleta)
paleta="red"
hist(colb$Resto.Transformada, main= "Población Resto trans.", col= paleta)
# Chunk 6: correlaciones
# En este trabajo estamos interesados en el impacto de
# la poblacion en el el IDH, veamos IDH con cada uno:
explanans=names(colb)[c(7:8)] # usando las logs
corrDem=cor(colb$IDH,colb[,explanans],
use = "na.or.complete")
stargazer(corrDem, title="Correlaciones",label="cor")
# Chunk 7: correlacionesind
corrTableX=round(cor(colb[,explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX_copy, title="Correlaciones",label="correind")
# Chunk 8: pcorre
# y la correlación entre las variables independientes:
#ver:
plot(colb[,explanans])
# Chunk 9: Modelos regrescion
LinRegA = lm(IDH ~ ., data = colb[,c(1,7)])
LinRegB = lm(IDH ~ ., data = colb[,c(1,7:8)])
stargazer(LinRegA, title="Modelo de regresion sin población resto",label="regA")
stargazer(LinRegA, title="Modelo de regresion con población resto",label="regB")
# Chunk 10: getMap
library(rgdal)
folder='COL_maps'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
mapCol <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
# con esto hagamos el merge:
sub_colb=colb[,c(1:2,7:8)]
mapCol_idh=merge(mapCol,sub_colb, by.x='NAME_1', by.y='Departamento',all.x=F)
# cuantas regiones me quedaron luego del merge?
nrow(mapCol_idh)  # todas!!...
# preparacion para clusterizar:
# que tengo?:
names(mapCol_idh)
# Chunk 11
dimensions=c("NAME_1","IDH","Cabecera.Transformada","Resto.Transformada")
library(cluster)
dataCluster=mapCol_idh@data[,c(dimensions)]
# como la data es numerica la normalizo (menos la column 1):
dataCluster[,-1]=scale(dataCluster[,-1])
resultado=kmeans(dataCluster[,-1],3)
#creo data frame con los clusters:
clusters=as.data.frame(resultado$cluster)
# aÃ±ado columna con nombre de regiones
clusters$NAME_1=dataCluster$NAME_1
names(clusters)=c('cluster','NAME_1')
#hago el merge hacia el mapa:
mapCol_idh=merge(mapCol_idh,clusters, by='NAME_1',all.x=F)
# Chunk 12: plotMap1
library(RColorBrewer)
library(classInt)
varToPLot=mapCol_idh$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(mapCol,col='grey',border=0)
plot(mapCol_idh, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","UP","MEDIUM"),
fill = paleta,
cex = 0.6,
bty = "n",
title="conglomerado")
